CURSOR
======

important concept, used in project mostly
copying required records/backing up some records from one table to another table

=> Cursor is used to backup the records from one table to another table.
=> We can create exact table to backup the records.
=> We can create cursor only inside the stored procedure.\\


create table empbackup(empno int,ename char(30),job char(30),mgr int,hiredate date,sal long,
comm int, deptno int);

delimiter &&
create procedure cursordemo()
begin

declare count int default 0;		-- variable to stop loop
declare empno,mgr,deptno,hiredate,
declare sal long;
delcare hiredate date;
declare ename,job char(30);
declare cur cursor for select * from emp;				-- cur is cursor name and after 'for' is the query for records to be fetched/backed up
declare exit handler for not found set count=1;			-- exit handle should act when there is not found error which sets the count to 1
open cur;					-- to use the cursor

it:loop
if count=1 then
leave it;
end if;

fetch cur into empno,ename,job,mgr,hiredate,sal,comm,deptno;	-- store the fetched data into same order of columns in backup table
insert into empbackup(empno,ename,job,mgr,hiredate,sal,comm,deptno)

end loop;

close cur;

end &&
delimiter ;

=> backup table must have same order and same datatype of column used in original table

=> loop is used to iterate through each record in the table

=> Exit Handler is used since we do not know total num of records are there in table
=> Handler acts when records are not found

4 steps :

=> declare cursor
=> open
=> fetch
=> close cursor

SET OPERATOR
============

=> Set operator is one of the special operators.
=> used to combine two select queries.
=> If we use SET operator, there must be same number of columns, similar datatypes, same order of the columns.
=> There are four types of SET operator

1. union
2. union all
3. intersect
4. minus (called minus in Oracle, except in MySQL)

create table person1(id int,name char(30));
create table person2(eid int,ename char(30));

insert into person1 values(1,'Sam'),(2,'Ram'),(3,'Sham'),(4,'Som');
insert into person2 values(1,'Sam'),(2,'Ram'),(31,'Balram'),(41,'Banu');

select * from person1;
select * from person2;

1) UNION

=> it shows all the records from both table but if there are duplicate records in both queries, union will remove those records.

select * from person1 union select * from person2;

2) UNION ALL

=> it shows all the records from both the tables including the duplicate records

select * from person1 union all select * from person2;

3) INTERSECT

=> it show only matched records from both tables

select * from person1 intersect select * from person2;
(does not show INTERSECT as a keyword but executes)

4) EXCEPT

=> it shows unmatched records in first table only

select * from person1 except select * from person2;
(shows error after EXCEPT keyword but executes)


===================================

SIR NOTES

[16:22, 8/31/2024] +91 63791 49161: Set Operator:

	Set Operator is one of the special operator, it 
is used to combine two select queries. if we use set
operator there must be same no of columns and same order of columns and also datatype must be similar.

there are four types of set operator:

	1.union
	2.unionall
	3.intersect
	4.minus (except)

1.union:

	it shows all the records from both tables but 
it removes duplicate records.

syntax:

select * from hello1 union select * from hello2;

2.union all:

	it shows all the records from both tables.

syntax:

select * from hello1 union all select * from hello2;

3.intersect:

	it shows only matched records from both tables.

syntax:

select * from hello1 intersect select * from hello2;

4.except:

	it shows unmatched records in first table.

syntax:

select * from hello1 except select * from hello2;
[16:23, 8/31/2024] +91 63791 49161: Cursor:

	Cursor is used to back up the records from one
table to another table. we can create exact tables to 
back up the records. we can create cursor inside the 
stored procedure.

Syntax for cursor:

use edata;
select * from emp;

desc emp;

select * from empbackup;

alter table empbackup modify hiredate char(30);

create table empbackup(empno int,ename char(30),job char(30),mgr int,hiredate date,sal long,comm int,deptno int);

delimiter &&
create procedure cursordemo()
begin

declare count int default 0;
declare empno,mgr,deptno,comm int;
declare salary long;
declare hiredate char(30);
declare ename,job char(30);
declare cur cursor for select * from emp;
declare exit handler for not found set count=1; 
open cur;

it:loop
if count =1 then
leave it;
end if;

fetch cur into empno,ename,job,mgr,hiredate,
salary,comm,deptno;

insert into empbackup values (empno,ename,job,mgr,hiredate,salary,comm,deptno);

end loop;
close cur;

end &&
delimiter ;

call cursordemo;

drop procedure cursordemo;