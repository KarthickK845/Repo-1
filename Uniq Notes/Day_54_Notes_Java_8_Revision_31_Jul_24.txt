1) Collection Vs Stream API differences

Collection - to store collection of objects or group of objects 		
Stream - to process collection of objects or group of objects

2) Why Function(or BiFunction) and UnaryOperator(or BinaryOperator) have same method apply(a) [or apply(a,b)] ? 

Bcoz, Function interface is extended by UnaryOperator

interface Function<T,R>
{
	R apply(T t);
}

interface UnaryOperator<T> extends Function<T,T>
{
	T apply(T t);
}

same for BiFunction and BinaryOperator => BiFunction interface is extended by BinaryOperator

3)

@FunctionalInterface
interface A{

}
interface B extends A 
{

}

Interface B is functional or not ?

Annotation notifies JVM that inbuilt features realted to that annotation
example saying to JVM that functional interface doesn't need object creation and implemented using lambda exp, etc

create a functionalinterface using @FunctionalInterface annotation

4)
Anonymous class Vs Lambda Expression

Anonymous class - can override both abstract class and interface methods
Lambda expression - can override only functional interface methods as an anonymous function

al.stream().min((e1,e2) -> e1-e2).get()

e1-e2 - shortest form for below compare() method implementation. This returns the list in ascending order by default.

if(e1>e2)
return 1;
else if(e1<e2)
...


min - returns element at first index
max - returns element at last index

e2-e1 - This returns the list in descending order by default.

min and max methods - use Comparator interface
filter - Predicate interface - test method
forEach - Consumer interface - accept method
reduce - BinaryOperator interface
map, flatmap - Function interface - returns Stream

Collectors :
groupingby - to group a set of similar values/objects - Function interface

Map<Object,List<String>> m = (Map) s.stream().collect(Collectors.groupingBy(f1->f1.length));
SOUT(m);
Above groups the String in List based on the length of each String like
{3=[hi,hey,hello], 4=[good,fine]}
Length is key and Strings are values

===========================================================================================================================
Date and Time API
=================

java.time - Date and Time related classes are in this package
java.time.LocalDate - return Date

LocalDate d=LocalDate.now(); - returns current date in YYYY-MM-DD format
LocaleTime t = LocaleTime.now(); - returns current time in HH:MM:SS.nS format
nS - nano Second

LocalDateTime to return both Date and Time
LocalDateTime dt = LocalDateTime.now();  - returns current date and time

d is LocalDate reference, so only use Date related methods

d.plusDays(10) - adds 10 days to current date
d.plusWeeks(4) - adds 4 weeks to current date

We can add days, weeks, months, years.

d.minusYears(2) - minus 2 years from current date
d.minusMonths(3) - minus 3 months from current date

t is LocalTime reference, so only use Time related methods

t.plusHours(1) - adds 1 hour to current time
t.minusMinutes(40) - minus 40 minutes from current time

dt - LocalDateTime reference - both Date and Time based methods

We can also get separate values based on a day for example 2024-07-31

d.getDayOfMonth() 	- returns 31
d.getMonth() 		- returns JULY
d.getMonthValue()	- returns 7
d.getDayOfWeek()	- WEDNESDAY
d.getYear()			- 2024

We can also get separate values based on a time for example 12:11

t.getHour()		- returns 12
t.getMinute()	- returns 11

using LocalDateTime reference - We can also get separate values of both Date and Time

To change and view the format of Date and Time

DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd-MM-yyyy");
String date=dtf.format(d);	//format the date in d to pattern specified in dtf 

dd-MMM-yyyy - returns 31-Jul-2024

E-MM-yyyy - returns Wed-07-2024

DateTimeFormatter dtf1 = DateTimeFormatter.ofPattern("mm : HH : ss");
String time=dtf1.format(t);	//format the time in t to pattern specified in dtf1

Similarly, we can format both date and time together 
Example dt  
DateTimeFormatter dtf2 = DateTimeFormatter.ofPattern("dd-MMM-yyyy mm : HH : ss");
String datetime=dtf2.format(dt);	//format the date and time in dt to pattern specified in dtf2

