Comparator interface

Comparable interface

#Refer written notes

sort method only for ascending order
Collections.sort(al) if al is homogeneous primitve type list
sort method calls compareTo method by default

comparable, comparator for both asc and desc orders

comparable - sorting based on only one field at a time. Ex: Student type object with diff fields - order based on id or name or marks
comparator - sorting based on any field of two objects, any number of times

Comparator
==========

pass object for compare method, overridden and called from a class different from the sort fields
no need to pass object for compareTo method, overridden and called inside the same class with sort fields

Collections.sort(al,new Comp());	//pass object of the class in which we have overridden compare method

mention the generic type while implementing the comparator interface. If not, we have to typecast inside the method.
public class Comp implements Comparator<Student>

override the compare method inside the class
public int compare(Student obj, Student obj2)
{
if(obj.rollno>obj2.rollno)		//calls compareTo like obj.rollno.compareTo(obj2.rollno)
	return 1;
else if(obj.rollno<obj2.rollno)
	return -1;
else
	return 0;
}

to get desc order of values in above program change the operator symbol or change the return values +1 to -1 and vice versa

typecasting if generic not specified

public class Comp implements Comparator{

public int compare(Object a,Object b)
{
Student a1=(Student)a;
Student b1=(Student)b;
if(a1.mark>b1.rollno)		//calls compareTo like obj.rollno.compareTo(obj2.rollno)
	return 1;
else if(a1.rollno<b1.rollno)
	return -1;
else
	return 0;
}

compare String objects

int a2=a1.name.compareTo(a2.name)
#Refer mam program

Comparable
==========

used for single sort

public int compareTo(

Collections.sort(al); 	//no need to pass the current class(same class object),sort method calls the overridden compareTo method